"""Email formatting for HackerNews AI digest."""
import logging
from datetime import datetime
from typing import List, Dict, Optional
from .config import Config

logger = logging.getLogger(__name__)

class EmailFormatter:
    """Formats digest content into plain text email format."""
    
    def __init__(self):
        """Initialize the email formatter."""
        pass
    
    def format_email(
        self, 
        stories: List[Dict], 
        summaries: Dict[str, str], 
        timestamp: Optional[datetime] = None,
        scraping_stats: Optional[Dict] = None
    ) -> str:
        """
        Format digest content into plain text email format.
        
        Args:
            stories: List of filtered HN stories with metadata
            summaries: Dict mapping URLs to AI summaries
            timestamp: When the digest was generated (defaults to now)
            scraping_stats: Optional stats about scraping success/failure
            
        Returns:
            Plain text email content
        """
        if timestamp is None:
            timestamp = datetime.now()
            
        return self._format_plain_text_email(stories, summaries, timestamp, scraping_stats)
    
    def _format_plain_text_email(
        self, 
        stories: List[Dict], 
        summaries: Dict[str, str], 
        timestamp: datetime,
        scraping_stats: Optional[Dict] = None
    ) -> str:
        """Format digest as plain text email."""
        date_str = timestamp.strftime("%B %d, %Y")
        
        # Email header
        text = f"""üì∞ {Config.USERNAME}'s Daily AI Digest - {date_str}
{'=' * 50}

"""
        
        # Add error summary if there were issues
        if scraping_stats and (scraping_stats.get('failed_scrapes', 0) > 0 or scraping_stats.get('failure_reasons')):
            text += self._format_error_summary_text(scraping_stats)
        
        # Main content
        if not stories:
            text += """ü§ñ No AI-related stories found today

HackerNews was quiet on the AI front today, or there may have been an issue fetching stories.
Check back tomorrow for your next AI digest!

"""
        else:
            story_count = len(stories)
            text += f"Found {story_count} AI-related stor{'y' if story_count == 1 else 'ies'} today\n\n"
            
            for i, story in enumerate(stories, 1):
                text += self._format_story_text(i, story, summaries.get(story['url']))
                text += "\n" + "-" * 50 + "\n\n"
        
        # Footer
        generation_time = timestamp.strftime("%Y-%m-%d %H:%M:%S")
        text += f"""Generated by HN-Digest at {generation_time}
Total stories processed: {len(stories)}

This digest was automatically generated. If you have feedback or issues, 
please contact the system administrator.
"""
        
        return text
    
    def _format_story_text(self, index: int, story: Dict, summary: Optional[str]) -> str:
        """Format a single story for plain text email."""
        title = story['title']
        url = story['url']
        score = story.get('score', 0)
        comments = story.get('descendants', 0)
        ai_score = story.get('ai_score', 0)
        keywords = story.get('matched_keywords', [])
        
        # Format keywords (show first 3 with "..." if more)
        if len(keywords) > 3:
            keyword_display = ', '.join(keywords[:3]) + '...'
        else:
            keyword_display = ', '.join(keywords)
        
        text = f"""{index}. {title}
({score} points, {comments} comments)
[AI relevance: {ai_score}, keywords: {keyword_display}]

"""
        
        if summary:
            text += f"{summary}\n\n"
        else:
            text += "Summary not available - article content could not be accessed or processed.\n\n"
        
        text += f"Source: {url}\n"
        
        return text
    
    def _format_error_summary_text(self, scraping_stats: Dict) -> str:
        """Format error summary for plain text email."""
        failed_scrapes = scraping_stats.get('failed_scrapes', 0)
        total_stories = failed_scrapes + scraping_stats.get('successful_scrapes', 0)
        
        text = "‚ö†Ô∏è PROCESSING ISSUES\n"
        text += "=" * 20 + "\n\n"
        
        if failed_scrapes > 0:
            text += f"Could not access content for {failed_scrapes} out of {total_stories} articles due to paywalls, blocking, or technical issues.\n\n"
        
        failure_reasons = scraping_stats.get('failure_reasons', {})
        if failure_reasons:
            text += "Issue breakdown:\n"
            for reason, count in failure_reasons.items():
                reason_display = reason.replace('_', ' ').title()
                text += f"- {reason_display}: {count}\n"
            text += "\n"
        
        return text
    
    def create_subject_line(self, date: Optional[datetime] = None, story_count: int = 0) -> str:
        """Create email subject line."""
        if date is None:
            date = datetime.now()
        
        date_str = date.strftime("%B %d, %Y")
        
        if story_count == 0:
            return f"{Config.USERNAME}'s Daily AI Digest - {date_str} (No stories today)"
        elif story_count == 1:
            return f"{Config.USERNAME}'s Daily AI Digest - {date_str} (1 story)"
        else:
            return f"{Config.USERNAME}'s Daily AI Digest - {date_str} ({story_count} stories)"
    
    def create_fallback_email(self, error_message: str, timestamp: Optional[datetime] = None) -> str:
        """
        Create fallback email when the digest generation fails completely.
        
        Args:
            error_message: Description of what went wrong
            timestamp: When the error occurred (defaults to now)
            
        Returns:
            Plain text email content
        """
        if timestamp is None:
            timestamp = datetime.now()
            
        date_str = timestamp.strftime("%B %d, %Y")
        generation_time = timestamp.strftime("%Y-%m-%d %H:%M:%S")
        
        text = f"""‚ö†Ô∏è {Config.USERNAME}'s Daily AI Digest - {date_str}
{'=' * 50}

SERVICE TEMPORARILY UNAVAILABLE

Your daily AI digest could not be generated due to a technical issue:

{error_message}

We'll try again tomorrow. If this persists, please check the system logs or contact the administrator.

Generated by HN-Digest at {generation_time}
"""
        
        return text