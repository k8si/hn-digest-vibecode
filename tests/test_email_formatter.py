"""Unit tests for email formatter."""
import pytest
from datetime import datetime
from unittest.mock import patch
from src.hn_digest.email_formatter import EmailFormatter

class TestEmailFormatter:
    """Test cases for EmailFormatter class."""
    
    def setup_method(self):
        """Set up test fixtures."""
        self.formatter = EmailFormatter()
    
    def test_format_email_with_stories(self):
        """Test formatting email with multiple stories."""
        stories = [
            {
                'title': 'OpenAI Releases GPT-5',
                'url': 'https://openai.com/gpt5',
                'score': 300,
                'descendants': 150,
                'ai_score': 8,
                'matched_keywords': ['gpt', 'openai', 'ai']
            },
            {
                'title': 'New Machine Learning Framework',
                'url': 'https://ml.com/framework',
                'score': 200,
                'descendants': 80,
                'ai_score': 6,
                'matched_keywords': ['machine learning', 'ml', 'framework']
            }
        ]
        
        summaries = {
            'https://openai.com/gpt5': 'OpenAI has announced GPT-5 with improved capabilities.',
            'https://ml.com/framework': 'A new ML framework for efficient model training.'
        }
        
        test_time = datetime(2024, 1, 15, 16, 0, 0)
        email_content = self.formatter.format_email(stories, summaries, test_time)
        
        # Check header (uses default Kate)
        assert "Kate's Daily AI Digest - January 15, 2024" in email_content
        assert "Found 2 AI-related stories today" in email_content
        
        # Check story content
        assert "1. OpenAI Releases GPT-5" in email_content
        assert "2. New Machine Learning Framework" in email_content
        assert "OpenAI has announced GPT-5" in email_content
        assert "A new ML framework" in email_content
        
        # Check metadata
        assert "(300 points, 150 comments)" in email_content
        assert "[AI relevance: 8, keywords: gpt, openai, ai]" in email_content
        
        # Check footer
        assert "Generated by HN-Digest at 2024-01-15 16:00:00" in email_content
        assert "Total stories processed: 2" in email_content
    
    @patch('src.hn_digest.email_formatter.Config.USERNAME', 'John')
    def test_format_email_with_custom_username(self):
        """Test formatting email with custom username."""
        stories = []
        summaries = {}
        
        email_content = self.formatter.format_email(stories, summaries)
        
        # Should use the mocked username
        assert "John's Daily AI Digest" in email_content
        assert "Kate's Daily AI Digest" not in email_content
    
    def test_format_email_no_stories(self):
        """Test formatting email when no stories found."""
        email_content = self.formatter.format_email([], {})
        
        assert "No AI-related stories found today" in email_content
        assert "HackerNews was quiet on the AI front" in email_content
        assert "Check back tomorrow" in email_content
    
    def test_format_email_with_scraping_stats(self):
        """Test formatting email with scraping statistics."""
        stories = [
            {
                'title': 'Test Story',
                'url': 'https://example.com/test',
                'score': 100,
                'descendants': 25,
                'ai_score': 5,
                'matched_keywords': ['ai']
            }
        ]
        
        summaries = {'https://example.com/test': 'Test summary'}
        
        scraping_stats = {
            'successful_scrapes': 1,
            'failed_scrapes': 2,
            'summaries_generated': 1,
            'failure_reasons': {
                'scraping_failed': 1,
                'ai_failed': 1
            }
        }
        
        email_content = self.formatter.format_email(stories, summaries, scraping_stats=scraping_stats)
        
        assert "PROCESSING ISSUES" in email_content
        assert "Could not access content for 2 out of 3 articles" in email_content
        assert "Scraping Failed: 1" in email_content
        assert "Ai Failed: 1" in email_content
    
    def test_format_email_missing_summaries(self):
        """Test formatting when some summaries are missing."""
        stories = [
            {
                'title': 'Story With Summary',
                'url': 'https://example.com/good',
                'score': 100,
                'descendants': 25,
                'ai_score': 5,
                'matched_keywords': ['ai']
            },
            {
                'title': 'Story Without Summary',
                'url': 'https://example.com/bad',
                'score': 80,
                'descendants': 15,
                'ai_score': 4,
                'matched_keywords': ['ml']
            }
        ]
        
        summaries = {
            'https://example.com/good': 'This is a good summary.'
            # Missing summary for the second story
        }
        
        email_content = self.formatter.format_email(stories, summaries)
        
        assert "This is a good summary." in email_content
        assert "Summary not available" in email_content
    
    def test_format_story_with_many_keywords(self):
        """Test story formatting with many keywords."""
        story = {
            'title': 'AI Article',
            'url': 'https://example.com/ai',
            'score': 150,
            'descendants': 50,
            'ai_score': 7,
            'matched_keywords': ['ai', 'machine learning', 'neural networks', 'deep learning', 'gpt']
        }
        
        email_content = self.formatter._format_story_text(1, story, "Test summary")
        
        # Should truncate keywords to first 3 plus "..."
        assert "keywords: ai, machine learning, neural networks..." in email_content
    
    def test_create_subject_line(self):
        """Test email subject line creation."""
        test_date = datetime(2024, 1, 15, 16, 0, 0)
        
        # No stories
        subject = self.formatter.create_subject_line(test_date, 0)
        assert subject == "Kate's Daily AI Digest - January 15, 2024 (No stories today)"
        
        # One story
        subject = self.formatter.create_subject_line(test_date, 1)
        assert subject == "Kate's Daily AI Digest - January 15, 2024 (1 story)"
        
        # Multiple stories
        subject = self.formatter.create_subject_line(test_date, 5)
        assert subject == "Kate's Daily AI Digest - January 15, 2024 (5 stories)"
    
    @patch('src.hn_digest.email_formatter.Config.USERNAME', 'Alice')
    def test_create_subject_line_custom_username(self):
        """Test subject line with custom username."""
        test_date = datetime(2024, 1, 15, 16, 0, 0)
        
        subject = self.formatter.create_subject_line(test_date, 3)
        assert subject == "Alice's Daily AI Digest - January 15, 2024 (3 stories)"
    
    def test_create_fallback_email(self):
        """Test fallback email creation."""
        error_message = "HackerNews API is down"
        test_time = datetime(2024, 1, 15, 16, 0, 0)
        
        fallback_content = self.formatter.create_fallback_email(error_message, test_time)
        
        assert "Kate's Daily AI Digest - January 15, 2024" in fallback_content
        assert "SERVICE TEMPORARILY UNAVAILABLE" in fallback_content
        assert "HackerNews API is down" in fallback_content
        assert "We'll try again tomorrow" in fallback_content
        assert "Generated by HN-Digest at 2024-01-15 16:00:00" in fallback_content
    
    @patch('src.hn_digest.email_formatter.Config.USERNAME', 'Bob')
    def test_create_fallback_email_custom_username(self):
        """Test fallback email with custom username."""
        error_message = "Test error"
        
        fallback_content = self.formatter.create_fallback_email(error_message)
        
        assert "Bob's Daily AI Digest" in fallback_content
        assert "Kate's Daily AI Digest" not in fallback_content
    
    def test_error_summary_formatting(self):
        """Test error summary formatting."""
        scraping_stats = {
            'successful_scrapes': 3,
            'failed_scrapes': 2,
            'failure_reasons': {
                'scraping_failed': 1,
                'ai_failed': 1
            }
        }
        
        error_summary = self.formatter._format_error_summary_text(scraping_stats)
        
        assert "PROCESSING ISSUES" in error_summary
        assert "Could not access content for 2 out of 5 articles" in error_summary
        assert "Scraping Failed: 1" in error_summary
        assert "Ai Failed: 1" in error_summary