"""Unit tests for summary formatter."""
import pytest
from datetime import datetime
from src.hn_digest.summary_formatter import SummaryFormatter

class TestSummaryFormatter:
    """Test cases for SummaryFormatter class."""
    
    def setup_method(self):
        """Set up test fixtures."""
        self.formatter = SummaryFormatter()
    
    def test_format_single_story_with_summary(self):
        """Test formatting a single story with AI summary."""
        story = {
            'title': 'OpenAI Releases New GPT Model',
            'url': 'https://openai.com/gpt-5',
            'score': 250,
            'descendants': 150,
            'ai_score': 5,
            'matched_keywords': ['gpt', 'openai', 'ai']
        }
        
        summary = "OpenAI has announced the release of GPT-5, featuring improved reasoning capabilities and reduced hallucinations."
        
        formatted = self.formatter.format_single_story(story, summary, content_available=True)
        
        assert '**OpenAI Releases New GPT Model**' in formatted
        assert '(250 points, 150 comments)' in formatted
        assert '[AI relevance: 5, keywords: gpt, openai, ai]' in formatted
        assert summary in formatted
        assert 'Source: https://openai.com/gpt-5' in formatted
        assert '---' in formatted  # Story separator
    
    def test_format_single_story_no_content(self):
        """Test formatting story when content is not available."""
        story = {
            'title': 'Paywalled Article',
            'url': 'https://premium.site.com/article',
            'score': 100,
            'descendants': 25,
            'ai_score': 3,
            'matched_keywords': ['ai', 'machine learning']
        }
        
        formatted = self.formatter.format_single_story(story, None, content_available=False)
        
        assert 'Article content could not be accessed' in formatted
        assert 'Please visit the original link' in formatted
    
    def test_format_single_story_no_summary(self):
        """Test formatting story when AI summary failed."""
        story = {
            'title': 'Technical Article',
            'url': 'https://tech.blog.com/post',
            'score': 75,
            'descendants': 10,
            'ai_score': 2,
            'matched_keywords': ['neural networks']
        }
        
        formatted = self.formatter.format_single_story(story, None, content_available=True)
        
        assert 'Summary not available' in formatted
        assert 'Please visit the original link' in formatted
    
    def test_format_single_story_many_keywords(self):
        """Test keyword truncation for stories with many matched keywords."""
        story = {
            'title': 'Comprehensive AI Article',
            'url': 'https://example.com/comprehensive',
            'score': 200,
            'descendants': 80,
            'ai_score': 8,
            'matched_keywords': ['ai', 'machine learning', 'neural networks', 'deep learning', 'gpt', 'llm']
        }
        
        formatted = self.formatter.format_single_story(story, "Summary text", content_available=True)
        
        # Should show first 3 keywords plus "..."
        assert 'keywords: ai, machine learning, neural networks...' in formatted
    
    def test_format_digest_with_stories(self):
        """Test formatting complete digest with multiple stories."""
        stories = [
            {
                'title': 'First AI Story',
                'url': 'https://example.com/first',
                'score': 300,
                'descendants': 100,
                'ai_score': 6,
                'matched_keywords': ['ai', 'gpt']
            },
            {
                'title': 'Second ML Story',
                'url': 'https://example.com/second',
                'score': 200,
                'descendants': 50,
                'ai_score': 4,
                'matched_keywords': ['machine learning']
            }
        ]
        
        summaries = {
            'https://example.com/first': 'Summary of first story',
            'https://example.com/second': 'Summary of second story'
        }
        
        test_time = datetime(2024, 1, 15, 14, 30, 0)
        digest = self.formatter.format_digest(stories, summaries, test_time)
        
        assert 'HackerNews AI Digest - January 15, 2024' in digest
        assert 'Found 2 AI-related stories' in digest
        assert '1. **First AI Story**' in digest
        assert '2. **Second ML Story**' in digest
        assert 'Summary of first story' in digest
        assert 'Summary of second story' in digest
        assert 'Generated by HN-Digest at 2024-01-15 14:30:00' in digest
        assert 'Total stories processed: 2' in digest
    
    def test_format_digest_empty(self):
        """Test formatting digest when no stories found."""
        digest = self.formatter.format_digest([], {})
        
        assert 'No AI-related stories found' in digest
    
    def test_create_debug_summary(self):
        """Test debug summary creation."""
        stories = [
            {'title': 'Story 1', 'url': 'https://example.com/1'},
            {'title': 'Story 2', 'url': 'https://example.com/2'},
            {'title': 'Story 3', 'url': 'https://example.com/3'}
        ]
        
        scraping_stats = {
            'successful_scrapes': 2,
            'failed_scrapes': 1,
            'summaries_generated': 1,
            'failure_reasons': {
                'scraping_failed': 1,
                'ai_failed': 1
            }
        }
        
        debug_summary = self.formatter.create_debug_summary(stories, scraping_stats)
        
        assert 'Total AI stories found: 3' in debug_summary
        assert 'Successful article scrapes: 2' in debug_summary
        assert 'Failed scrapes: 1' in debug_summary
        assert 'AI summaries generated: 1' in debug_summary
        assert 'Success rate: 66.7%' in debug_summary
        assert 'scraping_failed: 1' in debug_summary
        assert 'ai_failed: 1' in debug_summary